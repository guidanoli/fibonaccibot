import json, facebook, re
from mngSettings import getSetting
from commas import *

PATTERNS = {   
    "NUM": "\AF\(([1-9]\d*|0)\) = ([1-9]\d*|0)\Z" ,
    "NC" : "\AF\(([1-9]\d{,2}(?:,\d{3})*|0)\) = ([1-9]\d{,2}(?:,\d{3})*|0)\Z" }
COMPILES = { k:re.compile(v) for k,v in PATTERNS.items() }
COMMAS = getSetting("commas")
TKNCURR_PATH = getSetting("tokenpath")

def NumericFields(msg):
    # Receives post message msg
    # Returns tuple (n,Fn) where...
    # "n" is the iteration counter
    # "Fn" is the iteration value
    # or returns None if mismatched
    assert(type(msg)==type("")),"Message isn't string"
    for k,c in COMPILES.items():
        result = c.match(msg)
        if c.match(msg) != None:
            assert(k in ["NUM","NC"]),"Pattern unrecognized"
            if k == "NUM":
                return [ int(v) for v in result.groups() ]
            elif k == "NC":
                return [ nwc2num(v) for v in result.groups() ]
            else:
                return None
    return None

def IsBotMessage(msg):
    # Considers every pattern
    # there is and tells if
    # message msg was generated by
    # bot (returns True) or
    # by admin (returns False)
    assert(type(msg)==type("")),"Message isn't string"
    return NumericFields(msg)!=None

def FormatMessage(n,fn):
    # Receives iteration n and iteration value fn
    # Returns formatted post message string
    # depending on the value of setting 'commas'
    assert(type(n)==type(0)),"Counter isn't number"
    assert(type(fn)==type(0)),"Iteration value isn't number"
    if COMMAS == "true":
        return "F({}) = {}".format(num2nwc(n),num2nwc(fn))
    else:
        return "F({}) = {}".format(n,fn)

def FibonacciBot(event, context):
    # Main function
    # Parameters are ignored
    # No return value
    print("Bot running...")
    token = ""
    try:
        f = open(TKNCURR_PATH,"r")
        token = f.readline()
        f.close()
    except IOError:
        print("Could not read token file.")
        return

    graph = facebook.GraphAPI(access_token=token)
    valid_posts = []
    print("Gathering last two iterations...")
    posts = graph.get_connections("me","feed")["data"]
    for p in posts:
        if len(valid_posts)>= 2:
            break
        if ("message" in p and IsBotMessage(p["message"]) ):
            valid_posts.append(p)
                
    msg = ""
    print("Calculating current iteration...")
    if( len(valid_posts) == 0 ):
        msg = "F(0) = 1"
    elif( len(valid_posts) == 1 ):
        msg = "F(1) = 1"
    else:
        s = [ p["message"] for p in valid_posts ]
        f = [ NumericFields(m) for m in s ]
        i = { "counter": f[0][0] + 1 , "value": f[0][1] + f[1][1] }
        assert(f[0][0]==f[1][0]+1),"Counter jump detected"
        msg = FormatMessage( i["counter"], i["value"] )
        
    try:
        post = graph.put_photo(open("bar.png","rb"), message=msg)
        print("Message posted: \""+msg+"\".")
        print(json.dumps(post))
    except facebook.GraphAPIError:
        print("An error occurred while trying to post to feed.")
        return
        
    return
